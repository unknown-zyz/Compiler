<CompUnit>
	<VarDecl>
		int
		<VarDef>
			a
			=
			<InitVal>
				<Exp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										1
		;
	<FuncDef>
		<FuncType>
			int
		func
		(
		)
		<Block>
			{
			<Stmt>
				<LVal>
					a
				=
				<Exp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										2
				;
			<Stmt>
				return
				<Exp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										1
				;
			}
	<FuncDef>
		<FuncType>
			int
		func2
		(
		)
		<Block>
			{
			<Stmt>
				<LVal>
					a
				=
				<Exp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										4
				;
			<Stmt>
				return
				<Exp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										10
				;
			}
	<FuncDef>
		<FuncType>
			int
		func3
		(
		)
		<Block>
			{
			<Stmt>
				<LVal>
					a
				=
				<Exp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										3
				;
			<Stmt>
				return
				<Exp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										0
				;
			}
	<MainFuncDef>
		int
		main
		(
		)
		<Block>
			{
			<Stmt>
				if
				(
				<Cond>
					<LOrExp>
						<LOrExp>
							<LAndExp>
								<EqExp>
									<RelExp>
										<AddExp>
											<MulExp>
												<UnaryExp>
													<PrimaryExp>
														<Number>
															0
						||
						<LOrExp>
							<LAndExp>
								<LAndExp>
									<EqExp>
										<RelExp>
											<AddExp>
												<MulExp>
													<UnaryExp>
														func
														(
														)
								&&
								<EqExp>
									<RelExp>
										<AddExp>
											<MulExp>
												<UnaryExp>
													func3
													(
													)
						||
						<LAndExp>
							<EqExp>
								<RelExp>
									<AddExp>
										<MulExp>
											<UnaryExp>
												func2
												(
												)
				)
				<Stmt>
					<Block>
						{
						<Stmt>
							printf
							(
							"%d--1"
							,
							<Exp>
								<AddExp>
									<MulExp>
										<UnaryExp>
											<PrimaryExp>
												<LVal>
													a
							)
							;
						}
			<Stmt>
				if
				(
				<Cond>
					<LOrExp>
						<LOrExp>
							<LAndExp>
								<EqExp>
									<RelExp>
										<AddExp>
											<MulExp>
												<UnaryExp>
													<PrimaryExp>
														<Number>
															1
						||
						<LAndExp>
							<EqExp>
								<RelExp>
									<AddExp>
										<MulExp>
											<UnaryExp>
												func3
												(
												)
				)
				<Stmt>
					<Block>
						{
						<Stmt>
							printf
							(
							"%d--2"
							,
							<Exp>
								<AddExp>
									<MulExp>
										<UnaryExp>
											<PrimaryExp>
												<LVal>
													a
							)
							;
						}
			<Stmt>
				if
				(
				<Cond>
					<LOrExp>
						<LOrExp>
							<LAndExp>
								<EqExp>
									<RelExp>
										<AddExp>
											<MulExp>
												<UnaryExp>
													<PrimaryExp>
														<Number>
															0
						||
						<LOrExp>
							<LAndExp>
								<EqExp>
									<RelExp>
										<AddExp>
											<MulExp>
												<UnaryExp>
													func3
													(
													)
						||
						<LAndExp>
							<EqExp>
								<RelExp>
									<RelExp>
										<AddExp>
											<MulExp>
												<UnaryExp>
													func
													(
													)
									<
									<AddExp>
										<MulExp>
											<UnaryExp>
												func2
												(
												)
				)
				<Stmt>
					<Block>
						{
						<Stmt>
							printf
							(
							"%d--3"
							,
							<Exp>
								<AddExp>
									<MulExp>
										<UnaryExp>
											<PrimaryExp>
												<LVal>
													a
							)
							;
						}
			<Stmt>
				return
				<Exp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										0
				;
			}
