<CompUnit>
	<VarDecl>
		int
		<VarDef>
			s1_1
			[
			<ConstExp>
				<AddExp>
					<MulExp>
						<UnaryExp>
							<PrimaryExp>
								<Number>
									3
			]
			[
			<ConstExp>
				<AddExp>
					<MulExp>
						<UnaryExp>
							<PrimaryExp>
								<Number>
									5
			]
			=
			<InitVal>
				{
				<InitVal>
					{
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<MulExp>
										<UnaryExp>
											<PrimaryExp>
												<Number>
													25
									*
									<UnaryExp>
										<PrimaryExp>
											<Number>
												4
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												200
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												300
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												400
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												500
					}
				,
				<InitVal>
					{
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												111
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												222
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												333
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												444
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												555
					}
				,
				<InitVal>
					{
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												99
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												102
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												0
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												123
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												145
					}
				}
		;
	<VarDecl>
		int
		<VarDef>
			s2_1
			[
			<ConstExp>
				<AddExp>
					<MulExp>
						<UnaryExp>
							<PrimaryExp>
								<Number>
									3
			]
			[
			<ConstExp>
				<AddExp>
					<MulExp>
						<UnaryExp>
							<PrimaryExp>
								<Number>
									5
			]
			=
			<InitVal>
				{
				<InitVal>
					{
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												100
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												200
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												300
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												400
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												500
					}
				,
				<InitVal>
					{
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												111
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												222
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												333
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												444
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												555
					}
				,
				<InitVal>
					{
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												99
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												102
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												0
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												123
					,
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												145
					}
				}
		;
	<VarDecl>
		int
		<VarDef>
			add
			[
			<ConstExp>
				<AddExp>
					<MulExp>
						<UnaryExp>
							<PrimaryExp>
								<Number>
									3
			]
			=
			<InitVal>
				{
				<InitVal>
					<Exp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											123
				,
				<InitVal>
					<Exp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											666
				,
				<InitVal>
					<Exp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											456
				}
		,
		<VarDef>
			s_2
			[
			<ConstExp>
				<AddExp>
					<MulExp>
						<UnaryExp>
							<PrimaryExp>
								<Number>
									3
			]
			=
			<InitVal>
				{
				<InitVal>
					<Exp>
						<AddExp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<LVal>
												s1_1
												[
												<Exp>
													<AddExp>
														<MulExp>
															<UnaryExp>
																<PrimaryExp>
																	<Number>
																		0
												]
												[
												<Exp>
													<AddExp>
														<MulExp>
															<UnaryExp>
																<PrimaryExp>
																	<Number>
																		0
												]
							-
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											100
				,
				<InitVal>
					<Exp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											0
				,
				<InitVal>
					<Exp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											0
				}
		;
	<VarDecl>
		int
		<VarDef>
			s_3
			[
			<ConstExp>
				<AddExp>
					<MulExp>
						<UnaryExp>
							<PrimaryExp>
								<Number>
									3
			]
			=
			<InitVal>
				{
				<InitVal>
					<Exp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											0
				,
				<InitVal>
					<Exp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											0
				,
				<InitVal>
					<Exp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											0
				}
		;
	<ConstDecl>
		const
		int
		<ConstDef>
			a1
			=
			<ConstInitVal>
				<ConstExp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										1
		,
		<ConstDef>
			a2
			=
			<ConstInitVal>
				<ConstExp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										2
		,
		<ConstDef>
			a3
			=
			<ConstInitVal>
				<ConstExp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										3
		;
	<ConstDecl>
		const
		int
		<ConstDef>
			month
			[
			<ConstExp>
				<AddExp>
					<MulExp>
						<UnaryExp>
							<PrimaryExp>
								<Number>
									9
			]
			=
			<ConstInitVal>
				{
				<ConstInitVal>
					<ConstExp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											1
				,
				<ConstInitVal>
					<ConstExp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											2
				,
				<ConstInitVal>
					<ConstExp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											3
				,
				<ConstInitVal>
					<ConstExp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											4
				,
				<ConstInitVal>
					<ConstExp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											5
				,
				<ConstInitVal>
					<ConstExp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											6
				,
				<ConstInitVal>
					<ConstExp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											7
				,
				<ConstInitVal>
					<ConstExp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											8
				,
				<ConstInitVal>
					<ConstExp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<Number>
											9
				}
		;
	<ConstDecl>
		const
		int
		<ConstDef>
			year_1
			=
			<ConstInitVal>
				<ConstExp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										4
		,
		<ConstDef>
			year_2
			=
			<ConstInitVal>
				<ConstExp>
					<AddExp>
						<MulExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<LVal>
											year_1
							*
							<UnaryExp>
								<PrimaryExp>
									<Number>
										25
		;
	<FuncDef>
		<FuncType>
			void
		get_average
		(
		<FuncFParams>
			<FuncFParam>
				int
				a
				[
				]
				[
				<ConstExp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										5
				]
		)
		<Block>
			{
			<VarDecl>
				int
				<VarDef>
					s
					=
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												0
				,
				<VarDef>
					i
					=
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												2
				;
			<Stmt>
				if
				(
				<Cond>
					<LOrExp>
						<LAndExp>
							<EqExp>
								<RelExp>
									<RelExp>
										<AddExp>
											<MulExp>
												<UnaryExp>
													<PrimaryExp>
														<LVal>
															i
									>=
									<AddExp>
										<MulExp>
											<UnaryExp>
												<PrimaryExp>
													<Number>
														0
				)
				<Stmt>
					<Block>
						{
						<Stmt>
							<LVal>
								s
							=
							<Exp>
								<AddExp>
									<AddExp>
										<MulExp>
											<UnaryExp>
												<PrimaryExp>
													<LVal>
														a
														[
														<Exp>
															<AddExp>
																<MulExp>
																	<UnaryExp>
																		<PrimaryExp>
																			<LVal>
																				i
														]
														[
														<Exp>
															<AddExp>
																<MulExp>
																	<UnaryExp>
																		<PrimaryExp>
																			<Number>
																				0
														]
									+
									<AddExp>
										<MulExp>
											<UnaryExp>
												<PrimaryExp>
													<LVal>
														a
														[
														<Exp>
															<AddExp>
																<MulExp>
																	<UnaryExp>
																		<PrimaryExp>
																			<LVal>
																				i
														]
														[
														<Exp>
															<AddExp>
																<MulExp>
																	<UnaryExp>
																		<PrimaryExp>
																			<Number>
																				1
														]
									+
									<AddExp>
										<MulExp>
											<UnaryExp>
												<PrimaryExp>
													<LVal>
														a
														[
														<Exp>
															<AddExp>
																<MulExp>
																	<UnaryExp>
																		<PrimaryExp>
																			<LVal>
																				i
														]
														[
														<Exp>
															<AddExp>
																<MulExp>
																	<UnaryExp>
																		<PrimaryExp>
																			<Number>
																				2
														]
									+
									<AddExp>
										<MulExp>
											<UnaryExp>
												<PrimaryExp>
													<LVal>
														a
														[
														<Exp>
															<AddExp>
																<MulExp>
																	<UnaryExp>
																		<PrimaryExp>
																			<LVal>
																				i
														]
														[
														<Exp>
															<AddExp>
																<MulExp>
																	<UnaryExp>
																		<PrimaryExp>
																			<Number>
																				3
														]
									+
									<MulExp>
										<UnaryExp>
											<PrimaryExp>
												<LVal>
													a
													[
													<Exp>
														<AddExp>
															<MulExp>
																<UnaryExp>
																	<PrimaryExp>
																		<LVal>
																			i
													]
													[
													<Exp>
														<AddExp>
															<MulExp>
																<UnaryExp>
																	<PrimaryExp>
																		<Number>
																			4
													]
							;
						<Stmt>
							<LVal>
								s
							=
							<Exp>
								<AddExp>
									<MulExp>
										<MulExp>
											<UnaryExp>
												<PrimaryExp>
													<LVal>
														s
										/
										<UnaryExp>
											<PrimaryExp>
												<Number>
													5
							;
						<Stmt>
							<LVal>
								s_2
								[
								<Exp>
									<AddExp>
										<MulExp>
											<UnaryExp>
												<PrimaryExp>
													<LVal>
														i
								]
							=
							<Exp>
								<AddExp>
									<MulExp>
										<UnaryExp>
											<PrimaryExp>
												<LVal>
													s
							;
						<Stmt>
							<LVal>
								i
							=
							<Exp>
								<AddExp>
									<AddExp>
										<MulExp>
											<UnaryExp>
												<PrimaryExp>
													<LVal>
														i
									-
									<MulExp>
										<UnaryExp>
											<PrimaryExp>
												<Number>
													1
							;
						}
			<Stmt>
				return
				;
			}
	<FuncDef>
		<FuncType>
			void
		blank
		(
		<FuncFParams>
			<FuncFParam>
				int
				a
			,
			<FuncFParam>
				int
				b
			,
			<FuncFParam>
				int
				c
		)
		<Block>
			{
			}
	<FuncDef>
		<FuncType>
			void
		blank2
		(
		<FuncFParams>
			<FuncFParam>
				int
				a
			,
			<FuncFParam>
				int
				b
				[
				]
			,
			<FuncFParam>
				int
				C23
				[
				]
		)
		<Block>
			{
			<Stmt>
				;
			}
	<FuncDef>
		<FuncType>
			int
		add_1
		(
		<FuncFParams>
			<FuncFParam>
				int
				a
			,
			<FuncFParam>
				int
				s
				[
				]
		)
		<Block>
			{
			<VarDecl>
				int
				<VarDef>
					i_1
					=
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												2
				,
				<VarDef>
					sum
					=
					<InitVal>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<Number>
												0
				;
			<Stmt>
				if
				(
				<Cond>
					<LOrExp>
						<LAndExp>
							<EqExp>
								<RelExp>
									<RelExp>
										<AddExp>
											<MulExp>
												<UnaryExp>
													<PrimaryExp>
														<LVal>
															i_1
									>=
									<AddExp>
										<MulExp>
											<UnaryExp>
												<PrimaryExp>
													<Number>
														0
				)
				<Stmt>
					<Block>
						{
						<Stmt>
							<LVal>
								sum
							=
							<Exp>
								<AddExp>
									<AddExp>
										<MulExp>
											<UnaryExp>
												<PrimaryExp>
													<LVal>
														sum
									+
									<MulExp>
										<UnaryExp>
											<PrimaryExp>
												<LVal>
													s
													[
													<Exp>
														<AddExp>
															<MulExp>
																<UnaryExp>
																	<PrimaryExp>
																		<LVal>
																			i_1
													]
							;
						<Stmt>
							<LVal>
								i_1
							=
							<Exp>
								<AddExp>
									<AddExp>
										<MulExp>
											<UnaryExp>
												<PrimaryExp>
													<LVal>
														i_1
									-
									<MulExp>
										<UnaryExp>
											<PrimaryExp>
												<Number>
													1
							;
						}
			<Stmt>
				<LVal>
					a
				=
				<Exp>
					<AddExp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<LVal>
											a
						-
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										3
				;
			<Stmt>
				<LVal>
					sum
				=
				<Exp>
					<AddExp>
						<MulExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<LVal>
											sum
							/
							<UnaryExp>
								<PrimaryExp>
									<LVal>
										a
				;
			<Stmt>
				<LVal>
					a
				=
				<Exp>
					<AddExp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<LVal>
											a
						+
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										4
				;
			<Stmt>
				<LVal>
					sum
				=
				<Exp>
					<AddExp>
						<MulExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<LVal>
											sum
							*
							<UnaryExp>
								<PrimaryExp>
									<LVal>
										a
				;
			<Stmt>
				<LVal>
					sum
				=
				<Exp>
					<AddExp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<LVal>
											sum
						-
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<LVal>
										a
				;
			<Stmt>
				<LVal>
					a
				=
				<Exp>
					<AddExp>
						<AddExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<LVal>
											a
						+
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										6
				;
			<Stmt>
				<LVal>
					sum
				=
				<Exp>
					<AddExp>
						<MulExp>
							<MulExp>
								<UnaryExp>
									<PrimaryExp>
										<LVal>
											sum
							%
							<UnaryExp>
								<PrimaryExp>
									<LVal>
										a
				;
			<Stmt>
				return
				<Exp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<LVal>
										sum
				;
			}
	<FuncDef>
		<FuncType>
			int
		checkyear
		(
		<FuncFParams>
			<FuncFParam>
				int
				year
		)
		<Block>
			{
			<Stmt>
				if
				(
				<Cond>
					<LOrExp>
						<LAndExp>
							<EqExp>
								<RelExp>
									<RelExp>
										<AddExp>
											<MulExp>
												<UnaryExp>
													<PrimaryExp>
														<LVal>
															year
									>=
									<AddExp>
										<MulExp>
											<UnaryExp>
												<PrimaryExp>
													<Number>
														0
				)
				<Stmt>
					<Block>
						{
						<Stmt>
							if
							(
							<Cond>
								<LOrExp>
									<LOrExp>
										<LAndExp>
											<EqExp>
												<EqExp>
													<RelExp>
														<AddExp>
															<MulExp>
																<UnaryExp>
																	<PrimaryExp>
																		<LVal>
																			year
												!=
												<RelExp>
													<AddExp>
														<MulExp>
															<UnaryExp>
																<UnaryOp>
																	+
																<UnaryExp>
																	<PrimaryExp>
																		<Number>
																			2022
									||
									<LAndExp>
										<EqExp>
											<RelExp>
												<RelExp>
													<AddExp>
														<MulExp>
															<UnaryExp>
																<PrimaryExp>
																	<LVal>
																		year
												<=
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<Number>
																	2021
							)
							<Stmt>
								<Block>
									{
									<Stmt>
										if
										(
										<Cond>
											<LOrExp>
												<LOrExp>
													<LAndExp>
														<EqExp>
															<EqExp>
																<RelExp>
																	<AddExp>
																		<MulExp>
																			<UnaryExp>
																				<PrimaryExp>
																					(
																					<Exp>
																						<AddExp>
																							<MulExp>
																								<MulExp>
																									<UnaryExp>
																										<PrimaryExp>
																											<LVal>
																												year
																								%
																								<UnaryExp>
																									<PrimaryExp>
																										(
																										<Exp>
																											<AddExp>
																												<MulExp>
																													<MulExp>
																														<UnaryExp>
																															<UnaryOp>
																																-
																															<UnaryExp>
																																<PrimaryExp>
																																	<LVal>
																																		year_1
																													*
																													<UnaryExp>
																														<UnaryOp>
																															-
																														<UnaryExp>
																															<PrimaryExp>
																																<LVal>
																																	year_2
																										)
																					)
															==
															<RelExp>
																<AddExp>
																	<MulExp>
																		<UnaryExp>
																			<PrimaryExp>
																				<Number>
																					0
												||
												<LAndExp>
													<LAndExp>
														<EqExp>
															<EqExp>
																<RelExp>
																	<AddExp>
																		<MulExp>
																			<UnaryExp>
																				<PrimaryExp>
																					(
																					<Exp>
																						<AddExp>
																							<MulExp>
																								<MulExp>
																									<UnaryExp>
																										<PrimaryExp>
																											<LVal>
																												year
																								%
																								<UnaryExp>
																									<PrimaryExp>
																										<LVal>
																											year_1
																					)
															==
															<RelExp>
																<AddExp>
																	<MulExp>
																		<UnaryExp>
																			<PrimaryExp>
																				<Number>
																					0
													&&
													<EqExp>
														<EqExp>
															<RelExp>
																<AddExp>
																	<MulExp>
																		<UnaryExp>
																			<PrimaryExp>
																				(
																				<Exp>
																					<AddExp>
																						<MulExp>
																							<MulExp>
																								<UnaryExp>
																									<PrimaryExp>
																										<LVal>
																											year
																							%
																							<UnaryExp>
																								<PrimaryExp>
																									<LVal>
																										year_2
																				)
														!=
														<RelExp>
															<AddExp>
																<MulExp>
																	<UnaryExp>
																		<PrimaryExp>
																			<Number>
																				0
										)
										<Stmt>
											<Block>
												{
												<Stmt>
													printf
													(
													"run:%d\n"
													,
													<Exp>
														<AddExp>
															<MulExp>
																<UnaryExp>
																	<PrimaryExp>
																		<LVal>
																			year
													)
													;
												}
										else
										<Stmt>
											<Block>
												{
												<Stmt>
													printf
													(
													"not run:%d\n"
													,
													<Exp>
														<AddExp>
															<MulExp>
																<UnaryExp>
																	<PrimaryExp>
																		<LVal>
																			year
													)
													;
												}
									}
							else
							<Stmt>
								<Block>
									{
									<Stmt>
										printf
										(
										"2022!!!\n"
										)
										;
									}
						}
			<Stmt>
				return
				<Exp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<LVal>
										year
				;
			}
	<FuncDef>
		<FuncType>
			void
		printsth
		(
		)
		<Block>
			{
			<Stmt>
				printf
				(
				"printsth\n"
				)
				;
			<Stmt>
				return
				;
			}
	<MainFuncDef>
		int
		main
		(
		)
		<Block>
			{
			<Stmt>
				<Block>
					{
					<VarDecl>
						int
						<VarDef>
							j
							=
							<InitVal>
								<Exp>
									<AddExp>
										<MulExp>
											<UnaryExp>
												<PrimaryExp>
													<Number>
														0
						,
						<VarDef>
							k
							=
							<InitVal>
								<Exp>
									<AddExp>
										<MulExp>
											<UnaryExp>
												<PrimaryExp>
													<Number>
														3
						,
						<VarDef>
							i
							=
							<InitVal>
								<Exp>
									<AddExp>
										<MulExp>
											<UnaryExp>
												<PrimaryExp>
													<Number>
														3
						;
					<VarDecl>
						int
						<VarDef>
							in_put
						;
					<VarDecl>
						int
						<VarDef>
							x
						,
						<VarDef>
							y
						,
						<VarDef>
							z
						;
					<VarDecl>
						int
						<VarDef>
							x_1
						;
					<VarDecl>
						int
						<VarDef>
							y_1
						,
						<VarDef>
							z_1
						;
					<VarDecl>
						int
						<VarDef>
							aaa
						,
						<VarDef>
							bbb
						,
						<VarDef>
							ccc
						,
						<VarDef>
							ddd
						,
						<VarDef>
							eee
						,
						<VarDef>
							fff
						;
					<Stmt>
						<LVal>
							in_put
						=
						getint
						(
						)
						;
					<Stmt>
						<LVal>
							x
						=
						getint
						(
						)
						;
					<Stmt>
						<LVal>
							y
						=
						getint
						(
						)
						;
					<Stmt>
						<LVal>
							z
						=
						getint
						(
						)
						;
					<Stmt>
						<LVal>
							x_1
						=
						getint
						(
						)
						;
					<Stmt>
						<LVal>
							y_1
						=
						getint
						(
						)
						;
					<Stmt>
						<LVal>
							z_1
						=
						getint
						(
						)
						;
					<Stmt>
						printf
						(
						"20373614\n"
						)
						;
					<Stmt>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										get_average
										(
										<FuncRParams>
											<Exp>
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<LVal>
																	s1_1
										)
						;
					<Stmt>
						if
						(
						<Cond>
							<LOrExp>
								<LAndExp>
									<EqExp>
										<RelExp>
											<RelExp>
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<LVal>
																	i
											>
											<AddExp>
												<MulExp>
													<UnaryExp>
														<PrimaryExp>
															<Number>
																0
						)
						<Stmt>
							<Block>
								{
								<Stmt>
									if
									(
									<Cond>
										<LOrExp>
											<LAndExp>
												<EqExp>
													<EqExp>
														<RelExp>
															<AddExp>
																<MulExp>
																	<UnaryExp>
																		<PrimaryExp>
																			<LVal>
																				s_2
																				[
																				<Exp>
																					<AddExp>
																						<AddExp>
																							<MulExp>
																								<UnaryExp>
																									<PrimaryExp>
																										<LVal>
																											i
																						-
																						<MulExp>
																							<UnaryExp>
																								<PrimaryExp>
																									<Number>
																										1
																				]
													==
													<RelExp>
														<AddExp>
															<MulExp>
																<UnaryExp>
																	<PrimaryExp>
																		<Number>
																			300
									)
									<Stmt>
										<Block>
											{
											<Stmt>
												<LVal>
													i
												=
												<Exp>
													<AddExp>
														<AddExp>
															<MulExp>
																<UnaryExp>
																	<PrimaryExp>
																		<LVal>
																			i
														-
														<MulExp>
															<UnaryExp>
																<PrimaryExp>
																	<Number>
																		1
												;
											<Stmt>
												continue
												;
											}
									else
									<Stmt>
										<Block>
											{
											<Stmt>
												if
												(
												<Cond>
													<LOrExp>
														<LAndExp>
															<LAndExp>
																<EqExp>
																	<RelExp>
																		<AddExp>
																			<MulExp>
																				<UnaryExp>
																					<PrimaryExp>
																						<Number>
																							1
															&&
															<LAndExp>
																<EqExp>
																	<RelExp>
																		<AddExp>
																			<MulExp>
																				<UnaryExp>
																					<UnaryOp>
																						!
																					<UnaryExp>
																						<PrimaryExp>
																							(
																							<Exp>
																								<AddExp>
																									<AddExp>
																										<MulExp>
																											<UnaryExp>
																												<PrimaryExp>
																													<LVal>
																														s_2
																														[
																														<Exp>
																															<AddExp>
																																<AddExp>
																																	<MulExp>
																																		<UnaryExp>
																																			<PrimaryExp>
																																				<LVal>
																																					i
																																-
																																<MulExp>
																																	<UnaryExp>
																																		<PrimaryExp>
																																			<Number>
																																				1
																														]
																									-
																									<MulExp>
																										<UnaryExp>
																											<PrimaryExp>
																												<Number>
																													300
																							)
															&&
															<EqExp>
																<RelExp>
																	<RelExp>
																		<AddExp>
																			<MulExp>
																				<UnaryExp>
																					<PrimaryExp>
																						<LVal>
																							s_2
																							[
																							<Exp>
																								<AddExp>
																									<AddExp>
																										<MulExp>
																											<UnaryExp>
																												<PrimaryExp>
																													<LVal>
																														i
																									-
																									<MulExp>
																										<UnaryExp>
																											<PrimaryExp>
																												<Number>
																													1
																							]
																	<
																	<AddExp>
																		<MulExp>
																			<UnaryExp>
																				<PrimaryExp>
																					<Number>
																						100
												)
												<Stmt>
													<Block>
														{
														<Stmt>
															printf
															(
															"LOW:%d\n"
															,
															<Exp>
																<AddExp>
																	<MulExp>
																		<UnaryExp>
																			<PrimaryExp>
																				<LVal>
																					s_2
																					[
																					<Exp>
																						<AddExp>
																							<AddExp>
																								<MulExp>
																									<UnaryExp>
																										<PrimaryExp>
																											<LVal>
																												i
																							-
																							<MulExp>
																								<UnaryExp>
																									<PrimaryExp>
																										<Number>
																											1
																					]
															)
															;
														}
											<Stmt>
												if
												(
												<Cond>
													<LOrExp>
														<LAndExp>
															<LAndExp>
																<EqExp>
																	<RelExp>
																		<AddExp>
																			<MulExp>
																				<UnaryExp>
																					<PrimaryExp>
																						<Number>
																							1
															&&
															<EqExp>
																<RelExp>
																	<RelExp>
																		<AddExp>
																			<MulExp>
																				<UnaryExp>
																					<PrimaryExp>
																						<Number>
																							0
																	>
																	<AddExp>
																		<MulExp>
																			<UnaryExp>
																				<PrimaryExp>
																					<Number>
																						1
												)
												<Stmt>
													<Block>
														{
														<Stmt>
															if
															(
															<Cond>
																<LOrExp>
																	<LOrExp>
																		<LAndExp>
																			<EqExp>
																				<EqExp>
																					<RelExp>
																						<AddExp>
																							<MulExp>
																								<UnaryExp>
																									<PrimaryExp>
																										<LVal>
																											s_2
																											[
																											<Exp>
																												<AddExp>
																													<AddExp>
																														<MulExp>
																															<UnaryExp>
																																<PrimaryExp>
																																	<LVal>
																																		i
																													-
																													<MulExp>
																														<UnaryExp>
																															<PrimaryExp>
																																<Number>
																																	1
																											]
																				==
																				<RelExp>
																					<AddExp>
																						<MulExp>
																							<UnaryExp>
																								<PrimaryExp>
																									<Number>
																										300
																	||
																	<LAndExp>
																		<EqExp>
																			<RelExp>
																				<RelExp>
																					<AddExp>
																						<MulExp>
																							<UnaryExp>
																								<PrimaryExp>
																									<LVal>
																										s_2
																										[
																										<Exp>
																											<AddExp>
																												<AddExp>
																													<MulExp>
																														<UnaryExp>
																															<PrimaryExp>
																																<LVal>
																																	i
																												-
																												<MulExp>
																													<UnaryExp>
																														<PrimaryExp>
																															<Number>
																																1
																										]
																				>
																				<AddExp>
																					<MulExp>
																						<UnaryExp>
																							<PrimaryExp>
																								<Number>
																									332
															)
															<Stmt>
																<Block>
																	{
																	<Stmt>
																		printf
																		(
																		"HIGH:%d\n"
																		,
																		<Exp>
																			<AddExp>
																				<MulExp>
																					<UnaryExp>
																						<PrimaryExp>
																							<LVal>
																								s_2
																								[
																								<Exp>
																									<AddExp>
																										<AddExp>
																											<MulExp>
																												<UnaryExp>
																													<PrimaryExp>
																														<LVal>
																															i
																										-
																										<MulExp>
																											<UnaryExp>
																												<PrimaryExp>
																													<Number>
																														1
																								]
																		)
																		;
																	<Stmt>
																		break
																		;
																	}
														}
											<Stmt>
												<LVal>
													i
												=
												<Exp>
													<AddExp>
														<AddExp>
															<MulExp>
																<UnaryExp>
																	<PrimaryExp>
																		<LVal>
																			i
														-
														<MulExp>
															<UnaryExp>
																<PrimaryExp>
																	<Number>
																		1
												;
											}
								}
					<Stmt>
						<LVal>
							j
						=
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										add_1
										(
										<FuncRParams>
											<Exp>
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<Number>
																	5
											,
											<Exp>
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<LVal>
																	add
										)
						;
					<Stmt>
						printf
						(
						"add:%d\n"
						,
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<LVal>
												j
						)
						;
					<Stmt>
						<LVal>
							k
						=
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										add_1
										(
										<FuncRParams>
											<Exp>
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<LVal>
																	in_put
											,
											<Exp>
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<LVal>
																	add
										)
						;
					<Stmt>
						printf
						(
						"input:%d\n"
						,
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<LVal>
												k
						)
						;
					<Stmt>
						<LVal>
							aaa
						=
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										checkyear
										(
										<FuncRParams>
											<Exp>
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<LVal>
																	x
										)
						;
					<Stmt>
						<LVal>
							bbb
						=
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										checkyear
										(
										<FuncRParams>
											<Exp>
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<LVal>
																	y
										)
						;
					<Stmt>
						<LVal>
							ccc
						=
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										checkyear
										(
										<FuncRParams>
											<Exp>
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<LVal>
																	z
										)
						;
					<Stmt>
						<LVal>
							ddd
						=
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										checkyear
										(
										<FuncRParams>
											<Exp>
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<LVal>
																	x_1
										)
						;
					<Stmt>
						<LVal>
							eee
						=
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										checkyear
										(
										<FuncRParams>
											<Exp>
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<LVal>
																	y_1
										)
						;
					<Stmt>
						<LVal>
							fff
						=
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										checkyear
										(
										<FuncRParams>
											<Exp>
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<LVal>
																	z_1
										)
						;
					<Stmt>
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										blank2
										(
										<FuncRParams>
											<Exp>
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<LVal>
																	j
											,
											<Exp>
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<LVal>
																	add
											,
											<Exp>
												<AddExp>
													<MulExp>
														<UnaryExp>
															<PrimaryExp>
																<LVal>
																	s1_1
																	[
																	<Exp>
																		<AddExp>
																			<MulExp>
																				<UnaryExp>
																					<PrimaryExp>
																						<Number>
																							0
																	]
										)
						;
					<Stmt>
						printf
						(
						"year1:%d,year2:%d,year3:%d,year4:%d,year5:%d,year6:%d\n"
						,
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<LVal>
												aaa
						,
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<LVal>
												bbb
						,
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<LVal>
												ccc
						,
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<LVal>
												ddd
						,
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<LVal>
												eee
						,
						<Exp>
							<AddExp>
								<MulExp>
									<UnaryExp>
										<PrimaryExp>
											<LVal>
												fff
						)
						;
					}
			<Stmt>
				<Exp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								printsth
								(
								)
				;
			<Stmt>
				return
				<Exp>
					<AddExp>
						<MulExp>
							<UnaryExp>
								<PrimaryExp>
									<Number>
										0
				;
			}
