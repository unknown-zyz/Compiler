declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)

@N = constant i32 10
@word = global [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9]
@z = global [3 x [3 x i32]] zeroinitializer

define dso_local i32 @rot15(i32 %0){
l0:
	%1 = alloca i32
	store i32 %0, i32* %1
	%2 = load i32, i32* %1
	%3 = icmp eq i32 %2, 1
	%4 = icmp ne i1 %3, 0
	br i1 %4, label %l1, label %l2
l1:
	ret i32 1
l2:
	%5 = load i32, i32* %1
	%6 = icmp eq i32 %5, 2
	%7 = icmp ne i1 %6, 0
	br i1 %7, label %l3, label %l4
l3:
	ret i32 2
l4:
	ret i32 0
}

define dso_local i32 @f(i32 %0, i32* %1, [3 x i32]* %2){
l5:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32*
	store i32* %1, i32** %4
	%5 = alloca [3 x i32]*
	store [3 x i32]* %2, [3 x i32]** %5
	ret i32 1
}

define dso_local i32 @main(){
l6:
	%0 = alloca i32
	store i32 3, i32* %0
	%1 = alloca i32
	%2 = load i32, i32* %0
	%3 = call i32 @rot15(i32 %2)
	%4 = load i32, i32* %0
	%5 = add i32 %3, %4
	%6 = getelementptr [10 x i32], [10 x i32]* @word, i32 0, i32 3
	%7 = load i32, i32* %6
	%8 = add i32 %5, %7
	store i32 %8, i32* %1
	%9 = alloca i32
	%10 = load i32, i32* %0
	%11 = getelementptr [10 x i32], [10 x i32]* @word, i32 0, i32 0
	%12 = getelementptr [3 x [3 x i32]], [3 x [3 x i32]]* @z, i32 0, i32 0
	%13 = call i32 @f(i32 %10, i32* %11, [3 x i32]* %12)
	%14 = call i32 @rot15(i32 %13)
	%15 = load i32, i32* %0
	%16 = getelementptr [10 x i32], [10 x i32]* @word, i32 0, i32 0
	%17 = getelementptr [3 x [3 x i32]], [3 x [3 x i32]]* @z, i32 0, i32 0
	%18 = call i32 @f(i32 %15, i32* %16, [3 x i32]* %17)
	%19 = mul i32 %18, 45
	%20 = add i32 %14, %19
	%21 = getelementptr [3 x [3 x i32]], [3 x [3 x i32]]* @z, i32 0, i32 1, i32 1
	%22 = load i32, i32* %21
	%23 = call i32 @rot15(i32 %22)
	%24 = sub i32 %20, %23
	%25 = getelementptr [3 x [3 x i32]], [3 x [3 x i32]]* @z, i32 0, i32 1, i32 2
	%26 = load i32, i32* %25
	%27 = add i32 %24, %26
	%28 = getelementptr [10 x i32], [10 x i32]* @word, i32 0, i32 2
	%29 = load i32, i32* %28
	%30 = add i32 %27, %29
	store i32 %30, i32* %9
	ret i32 0
}

